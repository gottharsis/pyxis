"use strict";

var headerVue = new Vue({
  el: "#header",
  data: {
    opacity: 0
  },
  computed: {
    animationDistance: function animationDistance() {
      var documentHeight = document.getElementById("hero").clientHeight;
      return documentHeight - 64;
    },
    styleObject: function styleObject() {
      var backgroundColor = "rgba(69, 90, 100, ".concat(this.opacity, ")");
      return {
        backgroundColor: backgroundColor
      };
    }
  },
  methods: {
    handleScroll: function handleScroll() {
      var _this = this;

      window.requestAnimationFrame(function () {
        if (window.scrollY > _this.animationDistance) {
          _this.opacity = 1;
        } else {
          //prettier-ignore
          _this.opacity = Math.pow(1.0 * window.scrollY / _this.animationDistance, 4);
        }
      });
    }
  },
  mounted: function mounted() {
    this.heroElement = document.getElementById("hero");
    window.addEventListener("scroll", this.handleScroll);
  },
  beforeDestroy: function beforeDestroy() {
    window.removeEventListener("scroll", this.handleScroll);
  }
});
"use strict";

var heroVue = new Vue({
  el: "#hero",
  data: {
    offset: 0,
    maxOffset: 10,
    velocity: -0.33
  },
  methods: {
    handleScroll: function handleScroll() {
      var _this = this;

      requestAnimationFrame(function () {
        // do not animate if hero not in viewport
        if (window.scrollY > _this.animationDistance) {
          return;
        }

        _this.offset = _this.velocity * window.scrollY;
      });
    }
  },
  computed: {
    styleObject: function styleObject() {
      var bgyPos = 50 + this.offset;
      return {
        backgroundPosition: "50% ".concat(bgyPos, "%")
      };
    }
  },
  mounted: function mounted() {
    this.animationDistance = this.$el.clientHeight;
    window.addEventListener("scroll", this.handleScroll);
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlYWRlci5qcyIsImhlcm8uanMiXSwibmFtZXMiOlsiaGVhZGVyVnVlIiwiVnVlIiwiZWwiLCJkYXRhIiwib3BhY2l0eSIsImNvbXB1dGVkIiwiYW5pbWF0aW9uRGlzdGFuY2UiLCJkb2N1bWVudEhlaWdodCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjbGllbnRIZWlnaHQiLCJzdHlsZU9iamVjdCIsImJhY2tncm91bmRDb2xvciIsIm1ldGhvZHMiLCJoYW5kbGVTY3JvbGwiLCJ3aW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzY3JvbGxZIiwiTWF0aCIsInBvdyIsIm1vdW50ZWQiLCJoZXJvRWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJiZWZvcmVEZXN0cm95IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhlcm9WdWUiLCJvZmZzZXQiLCJtYXhPZmZzZXQiLCJ2ZWxvY2l0eSIsImJneVBvcyIsImJhY2tncm91bmRQb3NpdGlvbiIsIiRlbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxTQUFTLEdBQUcsSUFBSUMsR0FBSixDQUFRO0FBQ3pCQyxFQUFBQSxFQUFFLEVBQUUsU0FEcUI7QUFFekJDLEVBQUFBLElBQUksRUFBRTtBQUNMQyxJQUFBQSxPQUFPLEVBQUU7QUFESixHQUZtQjtBQUt6QkMsRUFBQUEsUUFBUSxFQUFFO0FBQ1RDLElBQUFBLGlCQUFpQixFQUFFLDZCQUFXO0FBQzdCLFVBQU1DLGNBQWMsR0FBR0MsUUFBUSxDQUFDQyxjQUFULENBQXdCLE1BQXhCLEVBQWdDQyxZQUF2RDtBQUNBLGFBQU9ILGNBQWMsR0FBRyxFQUF4QjtBQUNBLEtBSlE7QUFLVEksSUFBQUEsV0FBVyxFQUFFLHVCQUFXO0FBQ3ZCLFVBQU1DLGVBQWUsK0JBQXdCLEtBQUtSLE9BQTdCLE1BQXJCO0FBQ0EsYUFBTztBQUNOUSxRQUFBQSxlQUFlLEVBQWZBO0FBRE0sT0FBUDtBQUdBO0FBVlEsR0FMZTtBQWlCekJDLEVBQUFBLE9BQU8sRUFBRTtBQUNSQyxJQUFBQSxZQUFZLEVBQUUsd0JBQVc7QUFBQTs7QUFDeEJDLE1BQUFBLE1BQU0sQ0FBQ0MscUJBQVAsQ0FBNkIsWUFBTTtBQUNsQyxZQUFJRCxNQUFNLENBQUNFLE9BQVAsR0FBaUIsS0FBSSxDQUFDWCxpQkFBMUIsRUFBNkM7QUFDNUMsVUFBQSxLQUFJLENBQUNGLE9BQUwsR0FBZSxDQUFmO0FBQ0EsU0FGRCxNQUVPO0FBQ047QUFDQSxVQUFBLEtBQUksQ0FBQ0EsT0FBTCxHQUFlYyxJQUFJLENBQUNDLEdBQUwsQ0FBVSxNQUFNSixNQUFNLENBQUNFLE9BQWQsR0FBeUIsS0FBSSxDQUFDWCxpQkFBdkMsRUFBMEQsQ0FBMUQsQ0FBZjtBQUNBO0FBQ0QsT0FQRDtBQVFBO0FBVk8sR0FqQmdCO0FBNkJ6QmMsRUFBQUEsT0FBTyxFQUFFLG1CQUFXO0FBQ25CLFNBQUtDLFdBQUwsR0FBbUJiLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixNQUF4QixDQUFuQjtBQUNBTSxJQUFBQSxNQUFNLENBQUNPLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLEtBQUtSLFlBQXZDO0FBQ0EsR0FoQ3dCO0FBaUN6QlMsRUFBQUEsYUFBYSxFQUFFLHlCQUFXO0FBQ3pCUixJQUFBQSxNQUFNLENBQUNTLG1CQUFQLENBQTJCLFFBQTNCLEVBQXFDLEtBQUtWLFlBQTFDO0FBQ0E7QUFuQ3dCLENBQVIsQ0FBbEI7OztBQ0FBLElBQU1XLE9BQU8sR0FBRyxJQUFJeEIsR0FBSixDQUFRO0FBQ3ZCQyxFQUFBQSxFQUFFLEVBQUUsT0FEbUI7QUFFdkJDLEVBQUFBLElBQUksRUFBRTtBQUNMdUIsSUFBQUEsTUFBTSxFQUFFLENBREg7QUFFTEMsSUFBQUEsU0FBUyxFQUFFLEVBRk47QUFHTEMsSUFBQUEsUUFBUSxFQUFFLENBQUM7QUFITixHQUZpQjtBQU92QmYsRUFBQUEsT0FBTyxFQUFFO0FBQ1JDLElBQUFBLFlBQVksRUFBRSx3QkFBVztBQUFBOztBQUN4QkUsTUFBQUEscUJBQXFCLENBQUMsWUFBTTtBQUMzQjtBQUNBLFlBQUlELE1BQU0sQ0FBQ0UsT0FBUCxHQUFpQixLQUFJLENBQUNYLGlCQUExQixFQUE2QztBQUM1QztBQUNBOztBQUNELFFBQUEsS0FBSSxDQUFDb0IsTUFBTCxHQUFjLEtBQUksQ0FBQ0UsUUFBTCxHQUFnQmIsTUFBTSxDQUFDRSxPQUFyQztBQUNBLE9BTm9CLENBQXJCO0FBT0E7QUFUTyxHQVBjO0FBa0J2QlosRUFBQUEsUUFBUSxFQUFFO0FBQ1RNLElBQUFBLFdBQVcsRUFBRSx1QkFBVztBQUN2QixVQUFNa0IsTUFBTSxHQUFHLEtBQUssS0FBS0gsTUFBekI7QUFDQSxhQUFPO0FBQ05JLFFBQUFBLGtCQUFrQixnQkFBU0QsTUFBVDtBQURaLE9BQVA7QUFHQTtBQU5RLEdBbEJhO0FBMEJ2QlQsRUFBQUEsT0FBTyxFQUFFLG1CQUFXO0FBQ25CLFNBQUtkLGlCQUFMLEdBQXlCLEtBQUt5QixHQUFMLENBQVNyQixZQUFsQztBQUNBSyxJQUFBQSxNQUFNLENBQUNPLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLEtBQUtSLFlBQXZDO0FBQ0E7QUE3QnNCLENBQVIsQ0FBaEIiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaGVhZGVyVnVlID0gbmV3IFZ1ZSh7XG5cdGVsOiBcIiNoZWFkZXJcIixcblx0ZGF0YToge1xuXHRcdG9wYWNpdHk6IDBcblx0fSxcblx0Y29tcHV0ZWQ6IHtcblx0XHRhbmltYXRpb25EaXN0YW5jZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb25zdCBkb2N1bWVudEhlaWdodCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaGVyb1wiKS5jbGllbnRIZWlnaHRcblx0XHRcdHJldHVybiBkb2N1bWVudEhlaWdodCAtIDY0XG5cdFx0fSxcblx0XHRzdHlsZU9iamVjdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBgcmdiYSg2OSwgOTAsIDEwMCwgJHt0aGlzLm9wYWNpdHl9KWBcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGJhY2tncm91bmRDb2xvclxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0bWV0aG9kczoge1xuXHRcdGhhbmRsZVNjcm9sbDogZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcblx0XHRcdFx0aWYgKHdpbmRvdy5zY3JvbGxZID4gdGhpcy5hbmltYXRpb25EaXN0YW5jZSkge1xuXHRcdFx0XHRcdHRoaXMub3BhY2l0eSA9IDFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvL3ByZXR0aWVyLWlnbm9yZVxuXHRcdFx0XHRcdHRoaXMub3BhY2l0eSA9IE1hdGgucG93KCgxLjAgKiB3aW5kb3cuc2Nyb2xsWSkgLyB0aGlzLmFuaW1hdGlvbkRpc3RhbmNlLCA0KVxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdH1cblx0fSxcblx0bW91bnRlZDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5oZXJvRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaGVyb1wiKVxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuaGFuZGxlU2Nyb2xsKVxuXHR9LFxuXHRiZWZvcmVEZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLmhhbmRsZVNjcm9sbClcblx0fVxufSlcbiIsImNvbnN0IGhlcm9WdWUgPSBuZXcgVnVlKHtcclxuXHRlbDogXCIjaGVyb1wiLFxyXG5cdGRhdGE6IHtcclxuXHRcdG9mZnNldDogMCxcclxuXHRcdG1heE9mZnNldDogMTAsXHJcblx0XHR2ZWxvY2l0eTogLTAuMzNcclxuXHR9LFxyXG5cdG1ldGhvZHM6IHtcclxuXHRcdGhhbmRsZVNjcm9sbDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcblx0XHRcdFx0Ly8gZG8gbm90IGFuaW1hdGUgaWYgaGVybyBub3QgaW4gdmlld3BvcnRcclxuXHRcdFx0XHRpZiAod2luZG93LnNjcm9sbFkgPiB0aGlzLmFuaW1hdGlvbkRpc3RhbmNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGhpcy5vZmZzZXQgPSB0aGlzLnZlbG9jaXR5ICogd2luZG93LnNjcm9sbFlcclxuXHRcdFx0fSlcclxuXHRcdH1cclxuXHR9LFxyXG5cdGNvbXB1dGVkOiB7XHJcblx0XHRzdHlsZU9iamVjdDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGNvbnN0IGJneVBvcyA9IDUwICsgdGhpcy5vZmZzZXRcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRiYWNrZ3JvdW5kUG9zaXRpb246IGA1MCUgJHtiZ3lQb3N9JWBcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblx0bW91bnRlZDogZnVuY3Rpb24oKSB7XHJcblx0XHR0aGlzLmFuaW1hdGlvbkRpc3RhbmNlID0gdGhpcy4kZWwuY2xpZW50SGVpZ2h0XHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLmhhbmRsZVNjcm9sbClcclxuXHR9XHJcbn0pXHJcbiJdfQ==
